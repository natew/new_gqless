// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic functionality works: generate_code 1`] = `
"// This should be included

import { createClient, QueryFetcher, ScalarsEnumsHash } from '@dish/gqless';

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
}

const scalarsEnumsHash: ScalarsEnumsHash = { String: true, Boolean: true };
export const generatedSchema = {
  query: { hello: { __type: 'String!' } },
  mutation: {},
  subscription: {},
} as const;

export interface Query {
  hello: ScalarsEnums['String'];
}

export interface Mutation {}

export interface Subscription {}

export interface GeneratedSchema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export interface ScalarsEnums extends Scalars {}

const queryFetcher: QueryFetcher = async function (query, variables) {
  const response = await fetch('/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query,
      variables,
    }),
    mode: 'cors',
  });

  if (!response.ok) {
    throw new Error(\`Network error, received status code \${response.status}\`);
  }

  const json = await response.json();

  return json;
};

export const { client, resolved, selectFields } = createClient<GeneratedSchema>(
  generatedSchema,
  scalarsEnumsHash,
  queryFetcher
);

export const { query, mutation, subscription } = client;
"
`;

exports[`basic functionality works: generate_generatedSchema 1`] = `
"{
  \\"query\\": {
    \\"hello\\": {
      \\"__type\\": \\"String!\\"
    }
  },
  \\"mutation\\": {},
  \\"subscription\\": {}
}"
`;

exports[`basic functionality works: generate_scalarsEnumHash 1`] = `
"{
  \\"String\\": true,
  \\"Boolean\\": true
}"
`;

exports[`custom query fetcher: generate_customQueryFetcher_code 1`] = `
"import { createClient, QueryFetcher, ScalarsEnumsHash } from '@dish/gqless';

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
}

const scalarsEnumsHash: ScalarsEnumsHash = { String: true, Boolean: true };
export const generatedSchema = {
  query: { hello: { __type: 'String!' } },
  mutation: {},
  subscription: {},
} as const;

export interface Query {
  hello: ScalarsEnums['String'];
}

export interface Mutation {}

export interface Subscription {}

export interface GeneratedSchema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export interface ScalarsEnums extends Scalars {}

const queryFetcher: QueryFetcher = async function (query, variables) {
  const response = await fetch('/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      authorization: 'bearer <token>',
    },
    body: JSON.stringify({
      query,
      variables,
    }),
    mode: 'cors',
  });

  if (!response.ok) {
    throw new Error(\`Network error, received status code \${response.status}\`);
  }

  const json = await response.json();
};

export const { client, resolved, selectFields } = createClient<GeneratedSchema>(
  generatedSchema,
  scalarsEnumsHash,
  queryFetcher
);

export const { query, mutation, subscription } = client;
"
`;

exports[`custom query fetcher: generate_customQueryFetcher_generatedSchema 1`] = `
"{
  \\"query\\": {
    \\"hello\\": {
      \\"__type\\": \\"String!\\"
    }
  },
  \\"mutation\\": {},
  \\"subscription\\": {}
}"
`;

exports[`custom query fetcher: generate_customQueryFetcher_scalarsEnumHash 1`] = `
"{
  \\"String\\": true,
  \\"Boolean\\": true
}"
`;

exports[`custom scalars works: generate_code 1`] = `
"import { createClient, QueryFetcher, ScalarsEnumsHash } from '@dish/gqless';

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Custom: 'hello world';
}

const scalarsEnumsHash: ScalarsEnumsHash = {
  Custom: true,
  Boolean: true,
  String: true,
};
export const generatedSchema = {
  query: { hello: { __type: 'Custom!' } },
  mutation: {},
  subscription: {},
} as const;

export interface Query {
  hello: ScalarsEnums['Custom'];
}

export interface Mutation {}

export interface Subscription {}

export interface GeneratedSchema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export interface ScalarsEnums extends Scalars {}

const queryFetcher: QueryFetcher = async function (query, variables) {
  const response = await fetch('/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query,
      variables,
    }),
    mode: 'cors',
  });

  if (!response.ok) {
    throw new Error(\`Network error, received status code \${response.status}\`);
  }

  const json = await response.json();

  return json;
};

export const { client, resolved, selectFields } = createClient<GeneratedSchema>(
  generatedSchema,
  scalarsEnumsHash,
  queryFetcher
);

export const { query, mutation, subscription } = client;
"
`;

exports[`custom scalars works: generate_customScalars_generatedSchema 1`] = `
"{
  \\"query\\": {
    \\"hello\\": {
      \\"__type\\": \\"Custom!\\"
    }
  },
  \\"mutation\\": {},
  \\"subscription\\": {}
}"
`;

exports[`custom scalars works: generate_customScalars_scalarsEnumHash 1`] = `
"{
  \\"Custom\\": true,
  \\"Boolean\\": true,
  \\"String\\": true
}"
`;

exports[`feature complete app generate works: featureComplete_code 1`] = `
"import { createClient, QueryFetcher, ScalarsEnumsHash } from '@dish/gqless';

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ExampleScalar: any;
}

export enum GreetingsEnum {
  Hello = 'Hello',
  Hi = 'Hi',
  Hey = 'Hey',
}

export interface GreetingsInput {
  language: Scalars['String'];
  value?: Maybe<Scalars['String']>;
  scal?: Maybe<Scalars['ExampleScalar']>;
}

const scalarsEnumsHash: ScalarsEnumsHash = {
  ExampleScalar: true,
  GreetingsEnum: true,
  String: true,
  Int: true,
  Boolean: true,
};
export const generatedSchema = {
  query: {
    simpleString: { __type: 'String!' },
    stringWithArgs: { __type: 'String!', __args: { hello: 'String!' } },
    stringNullableWithArgs: {
      __type: 'String',
      __args: { hello: 'String!', helloTwo: 'String' },
    },
    stringNullableWithArgsArray: {
      __type: 'String',
      __args: { hello: '[String]!' },
    },
    object: { __type: 'Human' },
    objectArray: { __type: '[Human]' },
    objectWithArgs: { __type: 'Human!', __args: { who: 'String!' } },
    arrayString: { __type: '[String!]!' },
    arrayObjectArgs: { __type: '[Human!]!', __args: { limit: 'Int' } },
    greetings: { __type: 'GreetingsEnum!' },
    giveGreetingsInput: {
      __type: 'String!',
      __args: { input: 'GreetingsInput!' },
    },
    number: { __type: 'Int!' },
  },
  mutation: { increment: { __type: 'Int!', __args: { n: 'Int!' } } },
  subscription: {},
  GreetingsInput: {
    language: { __type: 'String!' },
    value: { __type: 'String' },
    scal: { __type: 'ExampleScalar' },
  },
  Human: {
    name: { __type: 'String!' },
    father: { __type: 'Human!' },
    fieldWithArgs: { __type: 'Int!', __args: { id: 'Int!' } },
  },
  OtherHuman: { name: { __type: 'String!' } },
} as const;

export interface Query {
  simpleString: ScalarsEnums['String'];
  stringWithArgs: (args: {
    hello: ScalarsEnums['String'];
  }) => ScalarsEnums['String'];
  stringNullableWithArgs: (args: {
    hello: ScalarsEnums['String'];
    helloTwo?: Maybe<ScalarsEnums['String']>;
  }) => Maybe<ScalarsEnums['String']>;
  stringNullableWithArgsArray: (args: {
    hello: Array<Maybe<ScalarsEnums['String']>>;
  }) => Maybe<ScalarsEnums['String']>;
  object: Maybe<Human>;
  objectArray: Maybe<Array<Maybe<Human>>>;
  objectWithArgs: (args: { who: ScalarsEnums['String'] }) => Human;
  arrayString: Array<ScalarsEnums['String']>;
  arrayObjectArgs: (args?: {
    limit?: Maybe<ScalarsEnums['Int']>;
  }) => Array<Human>;
  greetings: ScalarsEnums['GreetingsEnum'];
  giveGreetingsInput: (args: {
    input: GreetingsInput;
  }) => ScalarsEnums['String'];
  number: ScalarsEnums['Int'];
}

export interface Mutation {
  increment: (args: { n: ScalarsEnums['Int'] }) => ScalarsEnums['Int'];
}

export interface Subscription {}

export interface Human {
  name: ScalarsEnums['String'];
  father: Human;
  fieldWithArgs: (args: { id: ScalarsEnums['Int'] }) => ScalarsEnums['Int'];
}

export interface OtherHuman {
  name: ScalarsEnums['String'];
}

export interface GeneratedSchema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export interface ScalarsEnums extends Scalars {
  GreetingsEnum: GreetingsEnum;
}

const queryFetcher: QueryFetcher = async function (query, variables) {
  const response = await fetch('/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query,
      variables,
    }),
    mode: 'cors',
  });

  if (!response.ok) {
    throw new Error(\`Network error, received status code \${response.status}\`);
  }

  const json = await response.json();

  return json;
};

export const { client, resolved, selectFields } = createClient<GeneratedSchema>(
  generatedSchema,
  scalarsEnumsHash,
  queryFetcher
);

export const { query, mutation, subscription } = client;
"
`;

exports[`feature complete app generate works: featureComplete_generatedSchema 1`] = `"{\\"query\\":{\\"simpleString\\":{\\"__type\\":\\"String!\\"},\\"stringWithArgs\\":{\\"__type\\":\\"String!\\",\\"__args\\":{\\"hello\\":\\"String!\\"}},\\"stringNullableWithArgs\\":{\\"__type\\":\\"String\\",\\"__args\\":{\\"hello\\":\\"String!\\",\\"helloTwo\\":\\"String\\"}},\\"stringNullableWithArgsArray\\":{\\"__type\\":\\"String\\",\\"__args\\":{\\"hello\\":\\"[String]!\\"}},\\"object\\":{\\"__type\\":\\"Human\\"},\\"objectArray\\":{\\"__type\\":\\"[Human]\\"},\\"objectWithArgs\\":{\\"__type\\":\\"Human!\\",\\"__args\\":{\\"who\\":\\"String!\\"}},\\"arrayString\\":{\\"__type\\":\\"[String!]!\\"},\\"arrayObjectArgs\\":{\\"__type\\":\\"[Human!]!\\",\\"__args\\":{\\"limit\\":\\"Int\\"}},\\"greetings\\":{\\"__type\\":\\"GreetingsEnum!\\"},\\"giveGreetingsInput\\":{\\"__type\\":\\"String!\\",\\"__args\\":{\\"input\\":\\"GreetingsInput!\\"}},\\"number\\":{\\"__type\\":\\"Int!\\"}},\\"mutation\\":{\\"increment\\":{\\"__type\\":\\"Int!\\",\\"__args\\":{\\"n\\":\\"Int!\\"}}},\\"subscription\\":{},\\"GreetingsInput\\":{\\"language\\":{\\"__type\\":\\"String!\\"},\\"value\\":{\\"__type\\":\\"String\\"},\\"scal\\":{\\"__type\\":\\"ExampleScalar\\"}},\\"Human\\":{\\"name\\":{\\"__type\\":\\"String!\\"},\\"father\\":{\\"__type\\":\\"Human!\\"},\\"fieldWithArgs\\":{\\"__type\\":\\"Int!\\",\\"__args\\":{\\"id\\":\\"Int!\\"}}},\\"OtherHuman\\":{\\"name\\":{\\"__type\\":\\"String!\\"}}}"`;

exports[`feature complete app generate works: featureComplete_scalarsEnumsHash 1`] = `"{\\"ExampleScalar\\":true,\\"GreetingsEnum\\":true,\\"String\\":true,\\"Int\\":true,\\"Boolean\\":true}"`;

exports[`mutation generates mutation: mutation_code 1`] = `
"import { createClient, QueryFetcher, ScalarsEnumsHash } from '@dish/gqless';

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
}

const scalarsEnumsHash: ScalarsEnumsHash = { String: true, Boolean: true };
export const generatedSchema = {
  query: { hello: { __type: 'String!' } },
  mutation: {
    helloMutation: { __type: 'String!', __args: { hello: 'String!' } },
  },
  subscription: {},
} as const;

export interface Query {
  hello: ScalarsEnums['String'];
}

export interface Mutation {
  helloMutation: (args: {
    hello: ScalarsEnums['String'];
  }) => ScalarsEnums['String'];
}

export interface Subscription {}

export interface GeneratedSchema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export interface ScalarsEnums extends Scalars {}

const queryFetcher: QueryFetcher = async function (query, variables) {
  const response = await fetch('/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query,
      variables,
    }),
    mode: 'cors',
  });

  if (!response.ok) {
    throw new Error(\`Network error, received status code \${response.status}\`);
  }

  const json = await response.json();

  return json;
};

export const { client, resolved, selectFields } = createClient<GeneratedSchema>(
  generatedSchema,
  scalarsEnumsHash,
  queryFetcher
);

export const { query, mutation, subscription } = client;
"
`;

exports[`mutation generates mutation: mutation_generatedSchema 1`] = `
Object {
  "mutation": Object {
    "helloMutation": Object {
      "__args": Object {
        "hello": "String!",
      },
      "__type": "String!",
    },
  },
  "query": Object {
    "hello": Object {
      "__type": "String!",
    },
  },
  "subscription": Object {},
}
`;

exports[`mutation generates mutation: mutation_scalarsEnumHash 1`] = `
Object {
  "Boolean": true,
  "String": true,
}
`;

exports[`subscription generates subscription: subscription_code 1`] = `
"import { createClient, QueryFetcher, ScalarsEnumsHash } from '@dish/gqless';

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
}

const scalarsEnumsHash: ScalarsEnumsHash = { String: true, Boolean: true };
export const generatedSchema = {
  query: { hello: { __type: 'String!' } },
  mutation: {},
  subscription: { newNotification: { __type: 'String!' } },
} as const;

export interface Query {
  hello: ScalarsEnums['String'];
}

export interface Mutation {}

export interface Subscription {
  newNotification: ScalarsEnums['String'];
}

export interface GeneratedSchema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export interface ScalarsEnums extends Scalars {}

const queryFetcher: QueryFetcher = async function (query, variables) {
  const response = await fetch('/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query,
      variables,
    }),
    mode: 'cors',
  });

  if (!response.ok) {
    throw new Error(\`Network error, received status code \${response.status}\`);
  }

  const json = await response.json();

  return json;
};

export const { client, resolved, selectFields } = createClient<GeneratedSchema>(
  generatedSchema,
  scalarsEnumsHash,
  queryFetcher
);

export const { query, mutation, subscription } = client;
"
`;

exports[`subscription generates subscription: subscription_generatedSchema 1`] = `
Object {
  "mutation": Object {},
  "query": Object {
    "hello": Object {
      "__type": "String!",
    },
  },
  "subscription": Object {
    "newNotification": Object {
      "__type": "String!",
    },
  },
}
`;

exports[`subscription generates subscription: subscription_scalarsEnumHash 1`] = `
Object {
  "Boolean": true,
  "String": true,
}
`;
